// Package main provides the Document Store API
// @title Hornetsecurity-Document Store API
// @version 1.0
// @description A simple document storage API with CRUD operations and JWT authentication
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
package main

import (
	"log"

	"docstore-api/src/config"
	"docstore-api/src/controllers"
	_ "docstore-api/src/docs" // This will be generated by swag
	"docstore-api/src/middleware"
	"docstore-api/src/models"
	"docstore-api/src/services"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func main() {
	// Load configuration
	cfg := config.LoadConfig()

	// Log the detected environment
	log.Printf("Detected environment: %s", cfg.Environment)

	// Create layers: Model -> Service -> Controller
	store := models.NewDocumentStore()
	documentService := services.NewDocumentService(store)
	documentController := controllers.NewDocumentController(documentService)
	authController := controllers.NewAuthController(cfg)
	healthController := controllers.NewHealthController(cfg)

	// Setup Gin router based on environment
	if cfg.Environment == "production" {
		gin.SetMode(gin.ReleaseMode)
	}
	r := gin.Default()

	// Health check endpoint (no authentication required)
	r.GET("/health", healthController.HealthCheck)
	log.Printf("Health check endpoint registered at: /health")

	// Metrics endpoint for Prometheus (no authentication required)
	r.GET("/metrics", healthController.Metrics)
	log.Printf("Metrics endpoint registered at: /metrics")

	// API routes
	v1 := r.Group("/api/v1")
	{
		// Auth routes (no JWT required)
		auth := v1.Group("/auth")
		{
			auth.POST("/login", authController.Login)
		}

		// Protected document routes (JWT required)
		documents := v1.Group("/documents")
		documents.Use(middleware.JWTAuthMiddleware(cfg))
		{
			documents.POST("", documentController.CreateDocument)
			documents.GET("", documentController.ListDocuments)
			documents.GET("/:id", documentController.GetDocument)
			documents.PUT("/:id", documentController.UpdateDocument)
			documents.PATCH("/:id", documentController.PartialUpdateDocument)
			documents.DELETE("/:id", documentController.DeleteDocument)
		}
	}

	// Environment-specific Swagger endpoint
	if cfg.Environment == "production" {
		// Production Swagger with instance name
		r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, ginSwagger.InstanceName("prod")))
	} else {
		// Development Swagger with instance name
		r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, ginSwagger.InstanceName("dev")))
	}

	// Add some sample data
	sampleDocs := []models.Document{
		{
			ID:          "1",
			Name:        "Getting Started",
			Description: "A guide to getting started with the document store",
		},
		{
			ID:          "2",
			Name:        "API Reference",
			Description: "Complete API reference for document operations",
		},
	}

	for _, doc := range sampleDocs {
		if err := store.Create(doc); err != nil {
			log.Printf("Error creating sample document %s: %v", doc.ID, err)
		}
	}

	log.Printf("Server starting on :%s", cfg.ServerPort)
	log.Printf("Swagger UI available at: http://localhost:%s/swagger/index.html", cfg.ServerPort)

	if err := r.Run(":" + cfg.ServerPort); err != nil {
		log.Fatal("Failed to start server:", err)
	}
}
